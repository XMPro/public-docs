{
  "README.html": {
    "href": "README.html",
    "title": "DocFX Documentation Site | DocFX Sample Documentation",
    "summary": "DocFX Documentation Site This directory contains the DocFX documentation site for the project. Important Notes This documentation should be maintained on the gh-pages branch, not on the main branch. The GitHub Actions workflow (.github/workflows/docfx.yml) is configured to build the documentation from this directory and deploy it to GitHub Pages. The site is built using DocFX and deployed to GitHub Pages using the GitHub Actions workflow. Local Development To preview the documentation locally: Install DocFX: dotnet tool install -g docfx Build the documentation: cd docs docfx build Serve the documentation locally: docfx serve _site Open your browser and go to http://localhost:8080 to view the documentation. Directory Structure docs/ - The root directory for the documentation docs/ - Documentation content images/ - Images used in the documentation _site/ - Generated site (not committed to the repository) docfx.json - DocFX configuration file toc.yml - Table of contents for the documentation Workflow Make changes to the documentation on the gh-pages branch Commit and push the changes to the gh-pages branch The GitHub Actions workflow will automatically build and deploy the documentation to GitHub Pages Notes The main branch should not contain the documentation files, as they are maintained on the gh-pages branch. The GitHub Actions workflow is triggered by pushes to the main branch, but it checks out the repository and builds the documentation from the docs directory on the gh-pages branch."
  },
  "docs/advanced/custom-templates.html": {
    "href": "docs/advanced/custom-templates.html",
    "title": "Custom Templates in DocFX | DocFX Sample Documentation",
    "summary": "Custom Templates in DocFX DocFX allows you to customize the appearance and behavior of your documentation site using templates. This guide explains how to create and use custom templates. Understanding Templates Templates in DocFX define how your content is rendered into HTML. DocFX uses a template engine called Mustache to process templates. The default template includes: HTML layouts CSS styles JavaScript for functionality like search Partial templates for components like headers and footers Creating a Custom Template To create a custom template: Start with the default template: docfx template export default This will export the default template to a folder named _exported_templates. Modify the template files: Edit the HTML files to change the structure Modify the CSS files to change the appearance Update the JavaScript files to add or modify functionality Use your custom template: Update your docfx.json file to use your custom template: \"build\": { \"template\": [ \"default\", \"./path/to/your/custom/template\" ] } Template Structure A typical template structure includes: template/ ├── fonts/ # Font files ├── layout/ # Layout templates │ ├── master.tmpl # Master template │ └── ... ├── partials/ # Partial templates │ ├── head.tmpl # Head section │ ├── footer.tmpl # Footer section │ └── ... ├── styles/ # CSS files │ ├── main.css │ └── ... └── scripts/ # JavaScript files ├── main.js └── ... Example: Customizing the Header Here's an example of how to customize the header in your template: Export the default template as described above Locate the header partial template (usually in partials/header.tmpl) Modify it to include your custom elements: <header> <div class=\"container\"> <a class=\"brand\" href=\"{{_rel}}index.html\"> <img src=\"{{_rel}}images/logo.png\" alt=\"{{_appName}}\" height=\"50\"> <span>{{_appName}}</span> </a> <div class=\"navbar-right\"> <!-- Your custom navigation elements --> <a href=\"{{_rel}}docs/introduction.html\">Docs</a> <a href=\"{{_rel}}api/index.html\">API</a> <a href=\"https://github.com/yourusername/your-project\" target=\"_blank\">GitHub</a> </div> </div> </header> Add corresponding CSS styles in your stylesheet Best Practices Incremental changes: Start with small changes to the default template rather than creating a template from scratch Version control: Keep your custom template in version control Documentation: Document your customizations for future reference Responsive design: Ensure your template works well on different screen sizes Accessibility: Maintain accessibility features in your custom template"
  },
  "docs/advanced/metadata.html": {
    "href": "docs/advanced/metadata.html",
    "title": "Working with Metadata in DocFX | DocFX Sample Documentation",
    "summary": "Working with Metadata in DocFX Metadata in DocFX allows you to control various aspects of your documentation, from page titles to global site settings. This guide explains how to use metadata effectively. Types of Metadata DocFX supports several types of metadata: Global Metadata: Applied to the entire documentation site File Metadata: Applied to specific files or groups of files YAML Header Metadata: Defined at the top of individual markdown files Global Metadata Global metadata is defined in your docfx.json file under the globalMetadata section: \"build\": { \"globalMetadata\": { \"_appTitle\": \"My Documentation\", \"_enableSearch\": true, \"_disableNavbar\": false, \"_appFooter\": \"© 2025 My Company\", \"_gitContribute\": { \"repo\": \"https://github.com/username/repo\", \"branch\": \"main\" } } } Common global metadata properties include: Property Description _appTitle The title of your documentation site _appName The name of your application _enableSearch Whether to enable search functionality _disableNavbar Whether to disable the top navigation bar _appFooter HTML content for the footer _gitContribute Configuration for GitHub contribution links File Metadata File metadata is applied to specific files or file patterns: \"build\": { \"fileMetadata\": { \"_layout\": { \"api/**.yml\": \"apiLayout\", \"docs/**.md\": \"conceptual\" }, \"_monikerRange\": { \"api/v1/**.yml\": \"v1\", \"api/v2/**.yml\": \"v2\" } } } This allows you to apply different settings to different parts of your documentation. YAML Header Metadata You can add metadata to individual markdown files using a YAML header at the top of the file: --- title: My Custom Title description: A detailed description of this page author: John Doe ms.date: 04/28/2025 --- # Content starts here Commonly Used Metadata Properties Property Description title The title of the page (shown in browser tab) description Description for SEO purposes author Author of the content ms.date Last updated date _layout The layout template to use uid Unique identifier for cross-referencing tags Tags for categorization Example: Using Metadata for Versioning You can use metadata to implement versioning in your documentation: Define version monikers in your docfx.json: \"build\": { \"globalMetadata\": { \"_defineVersions\": [\"v1\", \"v2\", \"v3\"] } } Apply version monikers to files: \"build\": { \"fileMetadata\": { \"_monikerRange\": { \"docs/v1/**.md\": \"v1\", \"docs/v2/**.md\": \"v2\", \"docs/v3/**.md\": \"v3\" } } } Add version selectors to your template Best Practices Be consistent: Use consistent naming conventions for metadata properties Document your metadata: Keep a record of custom metadata properties you define Don't overuse: Only add metadata that serves a specific purpose Validate: Regularly check that your metadata is correctly applied"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | DocFX Sample Documentation",
    "summary": "Getting Started This guide will help you get started with using this documentation and the project it describes. Prerequisites Before you begin, ensure you have the following installed: .NET SDK (version 6.0 or later) DocFX (can be installed via dotnet tool install -g docfx) A text editor or IDE (Visual Studio Code recommended) Installation Clone the repository: git clone https://github.com/yourusername/your-project.git cd your-project Build the project: dotnet build Running the Documentation Locally To preview the documentation locally: Navigate to the documentation directory: cd docs Run DocFX with the serve option: docfx docfx.json --serve Open your browser and go to http://localhost:8080 to view the documentation. Making Changes To make changes to the documentation: Edit the markdown files in the docs directory. If you add new pages, update the toc.yml file to include them in the navigation. Run DocFX again to see your changes. Best Practices Use clear, concise language Include code examples where appropriate Add images to illustrate complex concepts Keep the documentation up-to-date with the code"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | DocFX Sample Documentation",
    "summary": "Introduction About This Project This is a sample project that demonstrates how to use DocFX to create documentation using markdown files. DocFX is a powerful documentation generation tool that can convert markdown files into a static website. Key Features Markdown Support: Write documentation using simple markdown syntax Table of Contents: Organize your documentation with hierarchical navigation Customizable Templates: Use built-in templates or create your own Search Functionality: Built-in search capabilities for your documentation Multiple Output Formats: Generate documentation in HTML, PDF, and other formats Why Documentation Matters Good documentation is essential for any project. It helps users understand how to use your product, developers to maintain and extend it, and stakeholders to understand its value. With DocFX, you can create professional documentation that is: Easy to write and maintain Versioned alongside your code Searchable and accessible Professionally formatted"
  },
  "docs/using-images.html": {
    "href": "docs/using-images.html",
    "title": "Using Images in Documentation | DocFX Sample Documentation",
    "summary": "Using Images in Documentation This page demonstrates how to include images in your DocFX documentation. Basic Image Inclusion You can include images in your markdown files using the standard markdown syntax: ![Alt text](../images/image-name.png) Example Below is an example of a diagram showing the DocFX documentation generation workflow: Image Sizing and Alignment While basic markdown doesn't support image sizing or alignment, you can use HTML to achieve these effects: <img src=\"../images/image-name.png\" width=\"300\" alt=\"Description\" align=\"right\" /> Best Practices for Images Use descriptive filenames - Name your images descriptively to make them easier to find and understand their purpose. Provide alt text - Always include alternative text for accessibility. Optimize image size - Compress images to reduce load times. Use appropriate formats - Use PNG for diagrams and screenshots, JPEG for photographs. Keep images organized - Store all images in a dedicated images folder. Using Diagrams For complex concepts, diagrams can be more effective than text alone. Consider using tools like: Mermaid for flowcharts and diagrams PlantUML for UML diagrams Draw.io for general-purpose diagrams"
  },
  "images/docfx-workflow.html": {
    "href": "images/docfx-workflow.html",
    "title": "| DocFX Sample Documentation",
    "summary": "+-------------------+ +-------------------+ +-------------------+ | | | | | | | Markdown Files +----->+ DocFX Build +----->+ HTML Website | | | | | | | +-------------------+ +-------------------+ +-------------------+ ^ | | | | v +-------------------+ +-------------------+ | | | | | Code Comments | | API Docs | | | | | +-------------------+ +-------------------+ *Figure 1: DocFX Documentation Generation Workflow*"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Our Sample Documentation | DocFX Sample Documentation",
    "summary": "Welcome to Our Sample Documentation This is a sample DocFX site that demonstrates how to use markdown files to create documentation. Overview This documentation site includes: Introduction to the project Getting started guide API documentation (if applicable) Quick Start Notes: Add images to the images folder if the file is referencing an image. Use markdown to format your documentation. Organize your content using the table of contents files (toc.yml). Learn More To learn more about DocFX, visit the official documentation."
  }
}